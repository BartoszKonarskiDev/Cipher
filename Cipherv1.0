#include <iostream>
#include <string>
#include <random>
#include <bitset>
#include <vector>//vectors are biascly arrays u can add stuff to
using namespace std;
int main()
{
	int p,k,c,c1,c2, nr,nn, r; // plaintext, key, cypher, cypher1, cypher2,number of repetitions(nr), which bit of NOT(nn), repetitions(r =nn so it doesnt change nn)
	string choice; //for picking ecnryption or decryption
	cout <<"encrypt or decrypt(e/d): "; //choice
	cin >> choice;
	cin.ignore(); //prep for getline so it accepts new input insted of one from choice

	if (choice == "e") { //encryption, make it reapet n times later and include ammount of times in the key
		string plaintext;
		cout<<"Insert text: ";
		getline(cin, plaintext); //gets text w/ spaces

		random_device rd;
		//generation
		mt19937 gen(rd());
		uniform_int_distribution<> forkey(32768, 65535); //random key

		k = forkey(gen); //generets the 15 bit key
		//converting key etc into bits
		uint16_t fk=k; //full key varible
		uint16_t nr = (fk >> 12) & 0b1111; //read nr from 1st 4 bits of the key
		uint16_t nn = fk & 0b1111; //read nn from last 4 bits of the key
		uint16_t tk = (fk >> 4) & 0xFF;//read from 4th to 11th bit as key

		//turn plaintext into decimal so no unprintable symboles
		vector<int> encryptedDecimals;

		for (char ch : plaintext) { //char : plaintext means for each character(int : variable would mean for each number in varible in the list) in plaintext
			//char ch varible ch of tpye char(single character), enitre code biascly jst applies it to all characters
			uint8_t p = static_cast<unsigned char>(ch);//makes the character into 8 bit binary, unsigned char is char but 0 to 255 insted of just char being -128 to 127 when in 8 bits
			uint8_t c2 = p;
			r = nr;
			//reapting cypher
			while (r!=0) {
				c = c2 ^ tk; //xor
				c1 = (c+tk) % 256; //modulo of next power of 2(cuz bits)
				c2 = c1 ^ tk; //xor again, later add opertion that repalces one of the bits of c2 trough NOT logic gate
				c2 ^= (1 << nn); // ^= is XOR of the nn-th bit of c2 with 1(so it works like a NOT, if the bit is 0 then its 1 cuz 1xor0 is 1, if both are 1 its 0 cuz 1xor1 is 0)
				r=r-1;
			}
			encryptedDecimals.push_back(static_cast<int>(c2));//encryptedDecimals is the vecotr
			//.pushack adds the (static_cast<int>(c2)) to the vector, static_cast<int>(c2) makes c2 an int
		}
		// messege
		cout << "Encrypted message (decimal): ";
		for (int val : encryptedDecimals) { // int : encryptedDecimals means going torugh each number, setting varible val as current one
			// for makes it reapet till last int
			cout << val << " "; //display variable val then space
		}
		cout << endl;//baiscly space

		// key
		cout << "Key: " << fk << endl;
	}
	else if (choice == "d") {
		vector<int> encryptedDecimals; //declerese the vector encryptedDecimals
		int fk; //delcare full key
		//asking for info
		cout <<"insert cypher(space seprated and end it with -1: ";
		int val;//declars int val
		while (cin >> val && val != -1) { // makes int(aka numbers) as declared numbers until it reaches -1
			//so for eg 51 21 -1 it changes val to 51, does stuff in the loop, here adding it to vector, then comes back, turns into 21, repaets and it then goes to -1 so it stops
			encryptedDecimals.push_back(val); //adds current val to encryptedDecimals vector
		}
		cout << "insert key: ";
		cin >> fk; //

		//reading k, nn and nr from bits
		uint16_t bfk = fk;//bfk is binary full key, just a placeholder value
		uint16_t nr =(bfk >>12) &0b1111;
		uint16_t nn =(bfk) &0b1111; //same thing but 8 bits
		uint16_t tk = (bfk >> 4) & 0b11111111; // read last 8 bits as a key, u can use 0bxFF too //tk is truekey

		string decrypted;
		//decryption
		for (int encVal : encryptedDecimals) { //same as last one
			uint8_t c2 = static_cast<uint8_t>(encVal); //static_cast coverting int to uint8_t
			r = nr;

			while (r != 0) {
				c2 ^= (1 << nn);
				c1 = c2 ^ tk;
				c = ((c1 - tk) + 256) % 256;
				c2 = c ^ tk;
				r--;
			}

			decrypted += static_cast<char>(c2);//+= means adding itself ot next one so for eg a += b is same as a = a+b
			//static_cast converts data so it converts c2 from int to char
			//so in total until last of encryptedDecimals is reached we add c2 as char to string decrypted so for eg if c2=a then in next loop c2=b decrypted="ab"
		}
		//print
		cout << "Decrypted text: " << decrypted << endl;
	}

	return 0;
}
